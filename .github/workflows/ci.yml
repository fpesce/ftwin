name: C Project CI
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  pull_request_target:
    branches: [ "master" ]
permissions:
  contents: read
  checks: write
  pull-requests: write
jobs:
  build-and-test:
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    # (The steps in build-and-test remain the same as your original file)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0
      - name: Setup third-party dependencies
        run: ./setup.sh
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            pkg-config \
            automake \
            autoconf-archive \
            patch \
            libtool \
            xsltproc \
            libapr1-dev \
            libaprutil1-dev \
            libpcre3-dev \
            libjansson-dev \
            check \
            lcov \
            doxygen \
            graphviz \
            libgd-dev \
            liblzma-dev \
            liblz4-dev \
            libzstd-dev \
            libxml2-dev \
            libbz2-dev \
            zlib1g-dev
      - name: Configure build
        run: |
          autoreconf -isf
          cd third-party/libpuzzle
          ./autogen.sh
          ./configure
          cd ../libarchive
          ./build/autogen.sh
          ./configure --without-openssl --without-nettle
          cd ../..
          ./configure --enable-coverage
      - name: Build
        run: make
      - name: Generate Doxygen documentation
        run: make dox
      - name: Run tests and generate reports
        run: |
          make junit
          make benchmark
          make coverage
      - name: Publish Unit Test Results
        uses: mikepenz/action-junit-report@v4
        if: always()
        with:
          report_paths: 'reports/junit.xml'
          check_name: 'Unit Test Results'
          fail_on_failure: true
      - name: Publish Code Coverage Report
        uses: zgosalvez/github-actions-report-lcov@v4
        if: always()
        with:
          coverage-files: reports/coverage.info
          github-token: ${{ secrets.GITHUB_TOKEN }}
          update-comment: true
      - name: Upload Benchmark JSON Artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: benchmark-results
          path: reports/benchmarks.json
      - name: Upload HTML Coverage Report Artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report-html
          path: reports/coverage/
      - name: Upload JUnit XML Artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: junit-results-xml
          path: reports/junit.xml
      - name: Upload Doxygen HTML Artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: doxygen-html
          path: docs/html/

  process-benchmarks:
    # (This job remains the same as your original file)
    needs: build-and-test
    if: github.event_name == 'pull_request' || github.event_name == 'pull_request_target'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download Benchmark Artifact
        uses: actions/download-artifact@v4
        with:
          name: benchmark-results
          path: reports/
      - name: Check for performance regressions
        uses: benchmark-action/github-action-benchmark@v1
        with:
          output-file-path: 'reports/benchmarks.json'
          tool: 'customBiggerIsBetter'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          fail-on-alert: true
          alert-threshold: '150%'
          auto-push: false
          benchmark-data-dir-path: 'benchmark-data'
          external-data-json-path: 'benchmark-data/data.json'

  # --- Updated deploy-site job ---
  deploy-site:
    needs: build-and-test
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required for deployment and committing back to master
    environment:
      name: github-pages
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # 1. Prepare the staging directory structure
      - name: Prepare staging directory
        run: mkdir -p ./site_staging/reports

      # 2. Restore existing benchmark data from the master branch
      - name: Restore benchmark data history
        run: |
          if [ -d "benchmark-data" ]; then
            mkdir -p ./site_staging/benchmark-data
            cp -r benchmark-data/* ./site_staging/benchmark-data/
          fi

      # 3. Download artifacts into the staging directory
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report-html
          path: ./site_staging/coverage
      - name: Download Doxygen docs
        uses: actions/download-artifact@v4
        with:
          name: doxygen-html
          path: ./site_staging/docs
      - name: Download Benchmark JSON
        uses: actions/download-artifact@v4
        with:
          name: benchmark-results
          # Download the new results into the staging/reports folder
          path: ./site_staging/reports/

      # 4. Update benchmark history locally within the staging directory
      - name: Update benchmark history
        uses: benchmark-action/github-action-benchmark@v1
        with:
          # Point to the newly downloaded results
          output-file-path: 'reports/benchmarks.json'
          tool: 'customBiggerIsBetter'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # Disable auto-push to prevent conflicts; we deploy manually later
          auto-push: false
          benchmark-data-dir-path: 'benchmark-data'
        # Run the action inside the staging directory
        working-directory: ./site_staging

      # 5. Save the updated benchmark data back to the workspace root (for commit to master)
      - name: Save updated benchmark data
        run: |
          if [ -d "./site_staging/benchmark-data" ]; then
            cp -r ./site_staging/benchmark-data benchmark-data
          fi

      # 6. Create the navigation index.html
      - name: Create index.html
        run: |
          cat <<EOF > ./site_staging/index.html
          <!DOCTYPE html>
          <html>
          <head><title>ftwin Project Reports</title></head>
          <body>
            <h1>ftwin Project Artifacts</h1>
            <ul>
              <li><a href="docs/">API Documentation (Doxygen)</a></li>
              <li><a href="coverage/">Code Coverage Report (LCOV)</a></li>
              <li><a href="benchmarks.html">Benchmark Trends</a></li>
            </ul>
          </body>
          </html>
          EOF

      # 7. Deploy the staged content cleanly to gh-pages
      - name: Deploy supplemental content
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site_staging
          # Set keep_files to false to ensure a clean deployment and remove stale files
          keep_files: false

      # 8. Commit the updated benchmark data back to the master branch
      - name: Commit benchmark data update
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "CI: Update benchmark data history"
          branch: master
          file_pattern: benchmark-data/*
