name: C Project CI
on:
  push:
    branches: [ "master" ]
  # Used for building/testing the PR code safely
  pull_request:
    branches: [ "master" ]
  # Used for running actions that need write access (like storing benchmarks)
  pull_request_target:
    branches: [ "master" ]

# Default permissions (kept restrictive globally)
permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  build-and-test:
    # Only run this job if it's a push or a standard pull_request (to avoid duplication)
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    # NOTE: We rely on the restrictive global permissions here. Do not add 'contents: write'.

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            pkg-config \
            automake \
            libtool \
            xsltproc \
            libapr1-dev \
            libaprutil1-dev \
            libpcre3-dev \
            check \
            lcov \
            doxygen \
            graphviz

      - name: Configure build
        run: |
          autoreconf -i
          ./configure --enable-coverage

      - name: Build
        run: make

      - name: Generate Doxygen documentation
        run: make dox

      - name: Run tests and generate reports
        run: |
          make junit
          make benchmark
          make coverage

      - name: Publish Unit Test Results
        uses: mikepenz/action-junit-report@v4
        if: always()
        with:
          report_paths: 'reports/junit.xml'
          check_name: 'Unit Test Results'
          fail_on_failure: true

      - name: Publish Code Coverage Report
        uses: zgosalvez/github-actions-report-lcov@v4
        if: always()
        with:
          coverage-files: reports/coverage.info
          github-token: ${{ secrets.GITHUB_TOKEN }}
          update-comment: true

      - name: Upload Benchmark JSON Artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          # Use this specific name as it's expected by the process-benchmarks job
          name: benchmark-results
          path: reports/benchmarks.json

      - name: Upload HTML Coverage Report Artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report-html
          path: reports/coverage/

      - name: Upload JUnit XML Artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: junit-results-xml
          path: reports/junit.xml

      - name: Upload Doxygen HTML Artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: doxygen-html
          path: docs/html/

  # Job to handle benchmark storage with elevated permissions
  process-benchmarks:
    needs: build-and-test
    # Run this job if it's a push or pull_request_target
    if: github.event_name == 'pull_request' || github.event_name == 'pull_request_target'
    runs-on: ubuntu-latest
    permissions:
      contents: read # Required to push benchmark history to gh-pages
      pull-requests: write # Required to post comments on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Download the artifact generated by the previous job
      - name: Download Benchmark Artifact
        uses: actions/download-artifact@v4
        with:
          name: benchmark-results
          # Download into the expected directory structure
          path: reports/

      - name: Check for performance regressions
        uses: benchmark-action/github-action-benchmark@v1
        with:
          output-file-path: 'reports/benchmarks.json'
          tool: 'customBiggerIsBetter'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          fail-on-alert: true
          alert-threshold: '150%'
          auto-push: false
          benchmark-data-dir-path: 'benchmark-data'
          external-data-json-path: 'benchmark-data/data.json'

  deploy-site:
    needs: build-and-test
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    environment:
      name: github-pages

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare staging directory
        run: mkdir -p ./site_staging

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report-html
          path: ./site_staging/coverage

      - name: Download Doxygen docs
        uses: actions/download-artifact@v4
        with:
          name: doxygen-html
          path: ./site_staging/docs

      - name: Download Benchmark JSON
        uses: actions/download-artifact@v4
        with:
          name: benchmark-results
          path: reports/

      - name: Update benchmark history on gh-pages
        uses: benchmark-action/github-action-benchmark@v1
        with:
          output-file-path: 'reports/benchmarks.json'
          tool: 'customBiggerIsBetter'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          benchmark-data-dir-path: 'benchmark-data'

      - name: Create index.html
        run: |
          cat <<EOF > ./site_staging/index.html
          <!DOCTYPE html>
          <html>
          <head><title>ftwin Project Reports</title></head>
          <body>
            <h1>ftwin Project Artifacts</h1>
            <ul>
              <li><a href="docs/">API Documentation (Doxygen)</a></li>
              <li><a href="coverage/">Code Coverage Report (LCOV)</a></li>
              <li><a href="benchmarks.html">Benchmark Trends</a></li>
            </ul>
          </body>
          </html>
          EOF

      - name: Deploy supplemental content
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site_staging
          keep_files: true
